# ¬©Ô∏è Hikka by Dan Gazizullin, 2021-2023
# ¬©Ô∏è falsetive by Artur Bykov, 2022-20?? 
# This file is a part of falsetive Userbot
# üåê https://github.com/XenSideNBTS/falsetive
# You can redistribute it and/or modify it under the terms of the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html
# ---------------------------------------------------------------------------------
# ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚°†‚£ø‚¢∑‚£ª‚£ø‚£æ‚£≥‚°á‚¢∫‚†ü‚†í‚†í‚†∂‚¢§‚£à‚†É‚¢†‚°Ä
# ‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚£º‚°ø‚†ã‚¢â‚£â‚£ô‚†ø‚†Å‚¢Å‚£§‚£§‚£Ñ‚°Ä‚†Ñ‚†à‚†≥‚¢æ‚£ø‚£Ñ
# ‚†Ñ‚†Ñ‚†Ñ‚¢û‚°û‚†Ñ‚£¥‚£ø‚°ø‚†õ‚†ì‚†Ñ‚†â‚†â‚†â‚†â‚†π‚£∑‚£Ñ‚†Ñ‚†Ñ‚†ô‚¢ø‚£¶
# ‚†Ñ‚¢Ä‚£æ‚°ü‚†Ñ‚£∏‚†ü‚†Å‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†ô‚¢ø‚°Ä‚†Ñ‚†∞‚£ø‚£Ü
# ‚†Ñ‚¢∏‚£ø‚†Å‚¢∏‚£ø‚†Ñ‚†Ñ‚¢∏‚¢∏‚†Ñ‚†Ñ‚†Ñ‚¢∏‚£Ü‚¢†‚£Ä‚°Ä‚£ß‚£®‚£ª‚°Ä‚†Ñ‚¢ª‚£ø‚£¶‚£Ä
# ‚†Ñ‚¢∏‚°á‚°Ä‚†ò‚£ø‚¢∞‚£ê‚¢æ‚¢ø‚°Ä‚†Ñ‚°Ä‚¢®‚£é‚£ª‚£∑‚£∂‚£ø‚£ø‚£ø‚£á‚¢Ä‚¢∏‚£ø‚£ø‚£ø‚£∑
# ‚†Ñ‚¢∏‚££‚°á‚£ß‚£ø‚£ø‚£ø‚£ø‚°é‚¢≥‚£ü‚†ø‚£ø‚£ø‚£è‚£â‚£ø‚£ø‚£ø‚¢ª‚£ø‚£ø‚£æ‚£ø‚£ø‚£ø‚£ø‚£¶
# ‚†Ñ‚†Ñ‚¢º‚°á‚¢π‚£ø‚°è‚¢†‚£ø‚£ø‚†Ñ‚†â‚†Ñ‚†Ñ‚†à‚†Ñ‚¢π‚£ø‚†ü‚†º‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
# ‚†Ñ‚†Ñ‚†à‚¢ø‚¢à‚£ø‚°õ‚†ò‚£ø‚°á‚†Ñ‚†Ñ‚°Ä‚†Ñ‚†Ñ‚†Ñ‚†à‚†â‚†Å‚†Ñ‚£∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
# ‚†Ñ‚†Ñ‚¢Ä‚£ø‚£º‚°ø‚£ø‚£Ä‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†É‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†ò‚£ª‚°è‚£ø‚£ø‚¢ª‚£ø‚£ø‚£ø‚£ø
# ‚†Ñ‚†Ñ‚†æ‚¢ª‚°á‚£ø‚£∏‚£¶‚£Ä‚†Ñ‚†Ñ‚†ê‚¢ü‚†ô‚¢ª‚†É‚†Ñ‚†Ñ‚†Ñ‚£æ‚°è‚£∑‚¢ª‚°π‚°ü‚£ø‚£ø‚°ü‚¢ø
# ‚†Ñ‚¢Ä‚°¥‚¢ª‚£á‚¢ø‚£∑‚¢ª‚°ü‚†ª‚£∂‚£§‚£Ä‚†â‚†Ñ‚£Ä‚£¥‚°ø‚¢£‚°ü‚†Ñ‚£ø‚¢∏‚°á‚£∞‚°ü‚†ª‚†É‚¢∏
# ‚¢†‚°è‚†Ñ‚†Ñ‚†à‚†ª‚£ø‚£è‚£∑‚†Ñ‚†à‚†ª‚†â‚†õ‚†õ‚†â‚†Ñ‚†Ñ‚¢õ‚†Ñ‚†Ñ‚†ª‚¢†‚†Å‚¢õ‚†Å‚†Ñ‚†Ñ‚¢∏
# ‚£º‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†à‚¢ø‚°ò‚†É‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚††‚†à‚†Ñ‚†Ñ‚†Ñ‚¢†‚£∏‚£†‚°û‚†Ñ‚†Ñ‚†Ñ‚£ø
# ‚£§‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢∏‚£á‚°á‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†à‚£ø‚†ü‚†Ñ‚†Ñ‚†Ñ‚£∏‚£ø
#
# ‚òï Module for Telethon User Bot (falsetive, Hikka, FTG)
# ---------------------------------------------------------------------------------
# meta developer: @falsetive
# meta description: Configurable ping

import datetime
import logging
import time

from telethon.tl.types import Message

from .. import loader, main, utils

logger = logging.getLogger(__name__)


class PingMod(loader.Module):

    strings = {
        "name": "Ping",
        "uptime": "üë©‚Äçüíº <b>Uptime</b>",
        "com": "{} <code>{}</code> <b>ms</b>\n{}",
        "modulesupports": "–ú–æ–¥—É–ª—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è {time} –∏ {uptime}",
        "pingmsg": "Here you can configure custom response message"
    }

    strings_ru = {
        "name": "Ping",
        "uptime": "üë©‚Äçüíº <b>–ê–ø—Ç–∞–π–º</b>",
        "com": "{} <code>{}</code> <b>–º—Å</b>\n{}",
        "modulesupports": "–ú–æ–¥—É–ª—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è {time} –∏ {uptime}",
        "pingmsg": "–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"
    }
    
    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "custom_message",
                "no",
                doc=lambda: self.strings("modulesupports"),
            ),
            loader.ConfigValue(
                "ping_message",
                "‚è± <b>Ping:</b>",
                lambda: self.strings("pingmsg"),
            ),
            loader.ConfigValue(
                "timezone",
                "0",
                lambda: "use 1, -1, -3 etc. to correct the server time on {time}",
            ),
        )

    def _render_ping(self):
        offset = datetime.timedelta(hours=self.config["timezone"])
        tz = datetime.timezone(offset)
        time2 = datetime.datetime.now(tz)
        time = time2.strftime("%H:%M:%S")
        uptime = utils.formatted_uptime()
        return (
            self.config["custom_message"].format(
                time=time,
                uptime=uptime,
            )
            if self.config["custom_message"] != "no"
            else (f'{self.strings("uptime")}: <b>{uptime}</b>')
        )

    @loader.command()
    async def ping(self, message: Message):
        """- Get your ping"""
        ping = self.config["ping_message"]
        start = time.perf_counter_ns()
        message = await utils.answer(message, "‚òï")
        try:
            await utils.answer(
                message,
                self.strings("com").format(
                    ping,
                    round((time.perf_counter_ns() - start) / 10**6, 3),
                    self._render_ping(),
                ),
            )
        except TypeError:
            await utils.answer(
                message,
                "Invalid number on .config -> Ping -> timezone, pls update it",
            )