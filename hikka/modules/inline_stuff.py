# ¬©Ô∏è Dan Gazizullin, 2021-2023
# This file is a part of Hikka Userbot
# üåê https://github.com/hikariatama/Hikka
# You can redistribute it and/or modify it under the terms of the GNU AGPLv3
# üîë https://www.gnu.org/licenses/agpl-3.0.html
# falsetive Team modifided Hikka files for falsetive
# üåê https://github.com/XenSideNBTS/falsetive


import re
import string

from telethon.errors.rpcerrorlist import YouBlockedUserError
from telethon.tl.functions.contacts import UnblockRequest
from telethon.tl.types import Message

from .. import loader, utils
from ..inline.types import BotInlineMessage


@loader.tds
class InlineStuffMod(loader.Module):
    """Provides support for inline stuff"""

    strings = {
        "name": "InlineStuff",
        "bot_username_invalid": (
            "<emoji document_id=5312526098750252863>üö´</emoji> <b>Specified bot"
            " username is invalid. It must end with</b> <code>bot</code> <b>and contain"
            " at least 4 symbols</b>"
        ),
        "bot_username_occupied": (
            "<emoji document_id=5312526098750252863>üö´</emoji> <b>This username is"
            " already occupied</b>"
        ),
        "bot_updated": (
            "<emoji document_id=6318792204118656433>üéâ</emoji> <b>Config successfully"
            " saved. Restart userbot to apply changes</b>"
        ),
        "this_is_hikka": (
            "üëæ <b>Hi! This is falsetive, UserBot that is based on the best UserBot Hikka. You can"
            " install it to your account!</b>\n\n<b>üåç <a"
            ' href="https://github.com/XenSideNBTS/falsetive">GitHub</a></b>\n<b>üëæ <a'
            ' href="https://t.me/Allfalsetive">–ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏</a></b>'
        ),
    }

    strings_ru = {
        "bot_username_invalid": (
            "<emoji document_id=5312526098750252863>üö´</emoji> <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–∏–∫"
            " –±–æ—Ç–∞. –û–Ω –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞</b> <code>bot</code> <b>–∏ –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ"
            " —á–µ–º 5 —Å–∏–º–≤–æ–ª–æ–≤</b>"
        ),
        "bot_username_occupied": (
            "<emoji document_id=5312526098750252863>üö´</emoji> <b>–¢–∞–∫–æ–π –Ω–∏–∫ –±–æ—Ç–∞ —É–∂–µ"
            " –∑–∞–Ω—è—Ç</b>"
        ),
        "bot_updated": (
            "<emoji document_id=6318792204118656433>üéâ</emoji> <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
            " –î–ª—è –∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å falsetive</b>"
        ),
        "this_is_hikka": (
            "üëæ <b>–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ falsetive, –Æ–∑–µ—Ä–ë–æ—Ç –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ Hikka. –í—ã –º–æ–∂–µ—Ç–µ"
            " —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç!</b>\n\n<b>üíé <a"
            ' href="https://github.com/XenSideNBTS/falsetive">GitHub</a></b>\n<b>üëæ <a'
            ' href="https://t.me/Allfalsetive">–ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏</a></b>'
        ),
    }

    strings_uk = {
        "bot_username_invalid": (
            "<emoji document_id=5312526098750252863>üö´</emoji> <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω—ñ–∫"
            " –±–æ—Ç. –í—ñ–Ω –ø–æ–≤–∏–Ω–µ–Ω –∑–∞–∫—ñ–Ω—á—É–≤–∞—Ç–∏—Å—è –Ω–∞</b> <code>bot</code> <b>—ñ –±—É—Ç–∏ –Ω–µ –∫–æ—Ä–æ—Ç—à–µ"
            " –Ω—ñ–∂ 5 —Å–∏–º–≤–æ–ª—ñ–≤</b>"
        ),
        "bot_username_occupied": (
            "<emoji document_id=5312526098750252863>üö´</emoji> <b>–¢–∞–∫–∏–π –Ω—ñ–∫ –±–æ—Ç–∞ –≤–∂–µ"
            " –∑–∞–π–Ω—è—Ç–∏–π</b>"
        ),
        "bot_updated": (
            "<emoji document_id=6318792204118656433>üéâ</emoji> <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω—ñ."
            " –î–ª—è —ó—Ö –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ falsetive</b>"
        ),
        "this_is_hikka": (
            "üëæ <b>–ü—Ä–∏–≤—ñ—Ç! –¶–µ falsetive, –∑–∞—Å–Ω–æ–≤–∞–Ω–∏–π –Ω–∞ Hikka. –í–∏ –º–æ–∂–µ—Ç–µ"
            " –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–∞ —Å–≤—ñ–π –∞–∫–∫–∞—É–Ω—Ç!</b>\n\n<b>üíé <a"
            ' href="https://github.com/XenSideNBTS/falsetive">GitHub</a></b>\n<b>üëæ <a'
            ' href="https://t.me/Allfalsetive">–ß–∞—Ç –ø—ñ–¥—Ç—Ä–∏–º–∫–∏</a></b>'
        ),
    }

    async def watcher(self, message: Message):
        if (
            getattr(message, "out", False)
            and getattr(message, "via_bot_id", False)
            and message.via_bot_id == self.inline.bot_id
            and "This message will be deleted automatically"
            in getattr(message, "raw_text", "")
        ):
            await message.delete()
            return

        if (
            not getattr(message, "out", False)
            or not getattr(message, "via_bot_id", False)
            or message.via_bot_id != self.inline.bot_id
            or "Opening gallery..." not in getattr(message, "raw_text", "")
        ):
            return

        id_ = re.search(r"#id: ([a-zA-Z0-9]+)", message.raw_text)[1]

        await message.delete()

        m = await message.respond("üëæ", reply_to=utils.get_topic(message))

        await self.inline.gallery(
            message=m,
            next_handler=self.inline._custom_map[id_]["handler"],
            caption=self.inline._custom_map[id_].get("caption", ""),
            force_me=self.inline._custom_map[id_].get("force_me", False),
            disable_security=self.inline._custom_map[id_].get(
                "disable_security", False
            ),
            silent=True,
        )

    async def _check_bot(self, username: str) -> bool:
        async with self._client.conversation("@BotFather", exclusive=False) as conv:
            try:
                m = await conv.send_message("/token")
            except YouBlockedUserError:
                await self._client(UnblockRequest(id="@BotFather"))
                m = await conv.send_message("/token")

            r = await conv.get_response()

            await m.delete()
            await r.delete()

            if not hasattr(r, "reply_markup") or not hasattr(r.reply_markup, "rows"):
                return False

            for row in r.reply_markup.rows:
                for button in row.buttons:
                    if username != button.text.strip("@"):
                        continue

                    m = await conv.send_message("/cancel")
                    r = await conv.get_response()

                    await m.delete()
                    await r.delete()

                    return True

    @loader.command(
        ru_doc="<—é–∑–µ—Ä–Ω–µ–π–º> - –ò–∑–º–µ–Ω–∏—Ç—å —é–∑–µ—Ä–Ω–µ–π–º –∏–Ω–ª–∞–π–Ω –±–æ—Ç–∞",
        it_doc="<username> - Cambia il nome utente del bot inline",
        de_doc="<username> - √Ñndere den Inline-Bot-Nutzernamen",
        tr_doc="<kullanƒ±cƒ± adƒ±> - ƒ∞√ße aktarma botunun kullanƒ±cƒ± adƒ±nƒ± deƒüi≈ütirin",
        uz_doc="<foydalanuvchi nomi> - Bot foydalanuvchi nomini o'zgartiring",
        es_doc="<nombre de usuario> - Cambia el nombre de usuario del bot de inline",
        kk_doc="<–ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã –∞—Ç—ã> - –ò–Ω–ª–∞–π–Ω –±–æ—Ç—Ç—ã“£ –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã –∞—Ç—ã–Ω ”©–∑–≥–µ—Ä—Ç—É",
    )
    async def ch_falsetive_bot(self, message: Message):
        """<username> - Change your falsetive inline bot username"""
        args = utils.get_args_raw(message).strip("@")
        if (
            not args
            or not args.lower().endswith("bot")
            or len(args) <= 4
            or any(
                litera not in (string.ascii_letters + string.digits + "_")
                for litera in args
            )
        ):
            await utils.answer(message, self.strings("bot_username_invalid"))
            return

        try:
            await self._client.get_entity(f"@{args}")
        except ValueError:
            pass
        else:
            if not await self._check_bot(args):
                await utils.answer(message, self.strings("bot_username_occupied"))
                return

        self._db.set("hikka.inline", "custom_bot", args)
        self._db.set("hikka.inline", "bot_token", None)
        await utils.answer(message, self.strings("bot_updated"))

    async def aiogram_watcher(self, message: BotInlineMessage):
        if message.text != "/start":
            return

        await message.answer_photo(
            "https://github.com/XenSideNBTS/falsetive/raw/Dev/assets/banner.png",
            caption=self.strings("this_is_hikka"),
        )

    async def client_ready(self):
        if self.get("migrated"):
            return

        self.set("migrated", True)
        async with self._client.conversation("@BotFather") as conv:
            for msg in [
                "/cancel",
                "/setinline",
                f"@{self.inline.bot_username}",
                "üëæ falsetive Inline",
            ]:
                m = await conv.send_message(msg)
                r = await conv.get_response()

                await m.delete()
                await r.delete()
