# ¬©Ô∏è Dan Gazizullin, 2021-2023
# This file is a part of Hikka Userbot
# üåê https://github.com/hikariatama/Hikka
# You can redistribute it and/or modify it under the terms of the GNU AGPLv3
# üîë https://www.gnu.org/licenses/agpl-3.0.html
# falsetive Team modifided Hikka files for falsetive
# üåê https://github.com/XenSideNBTS/falsetive

import asyncio
import datetime
import io
import json
import logging
import time

from telethon.tl.types import Message

from .. import loader, utils
from ..inline.types import BotInlineCall

logger = logging.getLogger(__name__)


@loader.tds
class falsetiveBackupMod(loader.Module):
    """Automatic database backup"""

    strings = {
        "name": "falsetiveBackup",
        "period": (
            "‚åöÔ∏è <b>Unit ¬´ALPHA¬ª</b> creates database backups periodically. You can"
            " change this behavior later.\n\nPlease, select the periodicity of"
            " automatic database backups"
        ),
        "saved": (
            "‚úÖ Backup period saved. You can re-configure it later with" " .autobackup"
        ),
        "never": (
            "‚úÖ I will not make automatic backups. You can re-configure it later with"
            " .autobackup"
        ),
        "invalid_args": (
            "üö´ <b>Specify correct backup period in hours, or `0` to disable</b>"
        ),
    }

    strings_ru = {
        "period": (
            "‚ùóÔ∏è<b>–°–æ–≤–µ—Ç—É—é –≤–∫–ª—é—á–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –ê–≤—Ç–æ–ë—ç–∫–∞–ø–∞</b> <i>(Unit Alpha)</i>"
            " <b><i>–í—Ä–µ–º—è –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –Æ–Ω–∏—Ç –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –±—ç–∫–∞–ø—ã –≤–∞—à–µ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞, —á—Ç–æ–±—ã –ª–µ–≥–∫–æ –≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ —Å–±–æ—è </i>\n"
            "–í —Å–ª—É—á–∞–µ –ø–æ—Ç–µ—Ä–∏ –∫–æ–Ω—Ñ–∏–≥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∏–∫–∞–∫ –Ω–µ –≤–µ—Ä–Ω—É—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ\n\n"
            "</b>‚ÄºÔ∏è<b> –ù–µ —Å –∫–µ–º –Ω–µ –¥–µ–ª–∏—Ç–µ—Å—å —Ñ–∞–π–ª–∞–º–∏ –∫–æ–Ω—Ñ–∏–≥–∞, –¥–∞–∂–µ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ falsetive! –û–Ω–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n\n"
            "<i>–ß—Ç–æ–±—ã –≤ —Ä—É—á–Ω—É—é –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –∞–≤—Ç–æ–±—ç–∫–∞–ø–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ </i></b><code>.autobackup\n\n"
            "</code>üîª <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ê–≤—Ç–æ–±—ç–∫–∞–ø–∞</b>"
        ),
        "saved": ("‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –ï–µ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Å –ø–æ–º–æ—â—å—é .autobackup"),
        "never": (
            "‚úÖ –Ø –Ω–µ –±—É–¥—É –¥–µ–ª–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏. –ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å"
            " –∏—Å–ø–æ–ª—å–∑—É—è .autobackup"
        ),
        "invalid_args": (
            "üö´ <b>–£–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –≤ —á–∞—Å–∞—Ö, –∏–ª–∏ `0` –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è</b>"
        ),
    }

    strings_uk = {
        "period": (
            "‚ùóÔ∏è<b>–†–∞–¥–∂—É –≤–∫–ª—é—á–∏—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é –ê–≤—Ç–æ–±–µ–∫–∞–ø–∞</b> <i>(Unit Alpha)</i>"
            " <b><i>–ß–∞—Å –≤—ñ–¥ —á–∞—Å—É –Æ–Ω—ñ—Ç –±—É–¥–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –±–µ–∫–∞–ø–∏ –≤–∞—à–æ–≥–æ –∫–æ–Ω—Ñ—ñ–≥–∞, —â–æ–± –ª–µ–≥–∫–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –≤—Å—ñ –¥–∞–Ω—ñ –≤ —Ä–∞–∑—ñ –∑–±–æ—é </i>\n"
            "–£ —Ä–∞–∑—ñ –≤—Ç—Ä–∞—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥–∞ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∏ –Ω—ñ—è–∫ –Ω–µ –ø–æ–≤–µ—Ä–Ω—É—Ç—å –≤–∞—à—ñ –¥–∞–Ω—ñ\n\n"
            "</b>‚ÄºÔ∏è<b> –ù—ñ –∑ –∫–∏–º –Ω–µ –¥—ñ–ª—ñ—Ç—å—Å—è —Ñ–∞–π–ª–∞–º–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞, –Ω–∞–≤—ñ—Ç—å –∑ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞–º–∏ Netfol! –í–æ–Ω–∏ –º—ñ—Å—Ç—è—Ç—å –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω—ñ –¥–∞–Ω—ñ\n\n"
            "<i>–©–æ–± –≤—Ä—É—á–Ω—É –∑–º—ñ–Ω–∏—Ç–∏ —á–∞—Å –∞–≤—Ç–æ–±–µ–∫–∞–ø—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ </i></b><code>.autobackup\n\n"
            "</code>üîª <b>–í–∏–±–µ—Ä—ñ—Ç—å —Ç–µ—Ä–º—ñ–Ω –ê–≤—Ç–æ–±–µ–∫–∞–ø—É</b>"
        ),
        "saved": (
            "‚úÖ –ü–µ—Ä—ñ–æ–¥–∏—á–Ω—ñ—Å—Ç—å –∑–±–µ—Ä–µ–∂–µ–Ω–∞! –á—ó –º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é .autobackup"
        ),
        "never": (
            "‚úÖ –Ø –Ω–µ –±—É–¥—É —Ä–æ–±–∏—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Ä–µ–∑–µ—Ä–≤–Ω—ñ –∫–æ–ø—ñ—ó. –ú–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏"
            " –∏—Å–ø–æ–ª—å–∑—É—è .autobackup"
        ),
        "invalid_args": (
            "üö´ <b>–í–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É –ø–µ—Ä—ñ–æ–¥–∏—á–Ω—ñ—Å—Ç—å –≤ –≥–æ–¥–∏–Ω–∞—Ö, –∞–±–æ '0' –¥–ª—è –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è</b>"
        ),
    }

    async def client_ready(self):
        if not self.get("period"):
            await self.inline.bot.send_photo(
                self.tg_id,
                photo="https://github.com/XenSideNBTS/falsetive/raw/stable/assets/BackUp.png",
                caption=self.strings("period"),
                reply_markup=self.inline.generate_markup(
                    utils.chunks(
                        [
                            {
                                "text": f"üï∞ {i} h",
                                "callback": self._set_backup_period,
                                "args": (i,),
                            }
                            for i in [2, 12, 24]
                        ],
                        3,
                    )
                    + [
                        [
                            {
                                "text": "üö´ Never",
                                "callback": self._set_backup_period,
                                "args": (0,),
                            }
                        ]
                    ]
                ),
            )

        self._backup_channel, _ = await utils.asset_channel(
            self._client,
            "falsetive-backups",
            "üìº Your database backups will appear here",
            silent=True,
            archive=True,
            avatar="https://github.com/hikariatama/assets/raw/master/hikka-backups.png",
            _folder="hikka",
        )

        self.handler.start()

    async def _set_backup_period(self, call: BotInlineCall, value: int):
        if not value:
            self.set("period", "disabled")
            await call.answer(self.strings("never"), show_alert=True)
            await call.delete()
            return

        self.set("period", value * 60 * 60)
        self.set("last_backup", round(time.time()))

        await call.answer(self.strings("saved"), show_alert=True)
        await call.delete()

    @loader.command(
        ru_doc="<–≤—Ä–µ–º—è –≤ —á–∞—Å–∞—Ö> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É –±—ç–∫–∞–ø–æ–≤",
        it_doc="<tempo in ore> - Imposta la frequenza dei backup",
        de_doc="<Stunden> - Setze die Backup-Frequenz",
        tr_doc="<saat cinsinden zaman> - Yedekleme periyodunu ayarla",
        uz_doc="<soatda vaqt> - E'lon tartibini belgilash",
        es_doc="<horas> - Establecer la frecuencia de copia de seguridad",
        kk_doc="<—Å–∞“ì–∞—Ç—Ç—ã —É–∞“õ—ã—Ç> - –†–µ–∑–µ—Ä–≤—Ç—ñ–∫ –∫”©—à—ñ—Ä–º–µ–ª–µ—Ä “õ–∞–π–¥–∞“ì—ã –∫–µ–∑–µ“£–¥–µ—Ä–¥–µ –∂–∞—Å–∞–ª–∞–¥—ã",
    )
    async def autobackup(self, message: Message):
        """<time in hours> - Change backup frequency"""
        args = utils.get_args_raw(message)
        if not args or not args.isdigit() or int(args) not in range(200):
            await utils.answer(message, self.strings("invalid_args"))
            return

        if not int(args):
            self.set("period", "disabled")
            await utils.answer(message, f"<b>{self.strings('never')}</b>")
            return

        period = int(args) * 60 * 60
        self.set("period", period)
        self.set("last_backup", round(time.time()))
        await utils.answer(message, f"<b>{self.strings('saved')}</b>")

    @loader.loop(interval=1)
    async def handler(self):
        try:
            if self.get("period") == "disabled":
                raise loader.StopLoop

            if not self.get("period"):
                await asyncio.sleep(3)
                return

            if not self.get("last_backup"):
                self.set("last_backup", round(time.time()))
                await asyncio.sleep(self.get("period"))
                return

            await asyncio.sleep(
                self.get("last_backup") + self.get("period") - time.time()
            )

            backup = io.BytesIO(json.dumps(self._db).encode("utf-8"))
            backup.name = "falsetive-db-backup-{}.json".format(
                getattr(datetime, "datetime", datetime).now().strftime("%d-%m-%Y-%H-%M")
            )

            await self._client.send_file(self._backup_channel, backup)
            self.set("last_backup", round(time.time()))
        except loader.StopLoop:
            raise
        except Exception:
            logger.exception("falsetiveBackup failed")
            await asyncio.sleep(60)
