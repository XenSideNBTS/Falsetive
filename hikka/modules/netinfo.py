#             ‚ñà ‚ñà ‚ñÄ ‚ñà‚ñÑ‚ñÄ ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñà ‚ñÄ
#             ‚ñà‚ñÄ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÑ ‚ñà
#              ¬© Copyright 2023
#           https://t.me/hikariatama
#
# üîí      Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html
# Netfoll Team modifided Hikka files for Netfoll
# üåê https://github.com/MXRRI/Netfoll

from telethon.tl.types import Message
from telethon.utils import get_display_name

from .. import loader, utils, version
from ..inline.types import InlineQuery

import psutil

@loader.tds
class NetfollInfoMod(loader.Module):
    """Show userbot info"""

    strings = {
        "name": "Info",
        "owner": "Owner",
        "version": "Version",
        "build": "Build",
        "prefix": "Prefix",
        "uptime": "Uptime",
        "branch": "Branch",
        "send_info": "Send userbot info",
        "description": "‚Ñπ This will not compromise any sensitive info",
        "setinfo_no_args": (
            "<emoji document_id=5370881342659631698>üò¢</emoji> <b>You need to specify"
            " text to change info to</b>"
        ),
        "setinfo_success": (
            "<emoji document_id=5436040291507247633>üéâ</emoji> <b>Info changed"
            " successfully</b>"
        ),
        "_cfg_cst_msg": (
            "Custom message for info. May contain {me}, {version}, {prefix},"
            " {platform}, {upd}, {uptime}, {cpu_usage}, {ram_usage} keywords"
        ),
        "_cfg_cst_btn": "Custom button for info. Leave empty to remove button",
        "_cfg_banner": "URL to image banner",
        "desc": (
            "<emoji document_id=4929415445443773080>üöÄ</emoji>"
            " <b>Netfoll</b>\n\nTelegram userbot with a lot of features, like inline"
            " galleries, forms, lists lists based on Hikka. Userbot - software,"
            " running on your Telegram account. If you write a command to any chat, it"
            " will get executed right there. Check out live examples at <a"
            ' href="https://github.com/MXRRI/Netfoll">GitHub</a>'
        ),
    }

    strings_ru = {
        "version": "–í–µ—Ä—Å–∏—è",
        "prefix": "–ü—Ä–µ—Ñ–∏–∫—Å",
        "uptime": "–ê–ø—Ç–∞–π–º",
        "send_info": "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —é–∑–µ—Ä–±–æ—Ç–µ",
        "description": "‚Ñπ –≠—Ç–æ –Ω–µ —Ä–∞—Å–∫—Ä–æ–µ—Ç –Ω–∏–∫–∞–∫–æ–π –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
        "_ihandle_doc_info": "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —é–∑–µ—Ä–±–æ—Ç–µ",
        "_cfg_cst_msg": (
            "–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ info. –ú–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ {me},"
            " {version}, {prefix}, {platform}, {upd}, {uptime}, {cpu_usage},"
            " {ram_usage}"
        ),
        "_cfg_cst_btn": (
            "–ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ info. –û—Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫—É"
        ),
        "_cfg_banner": "–°—Å—ã–ª–∫–∞ –Ω–∞ –±–∞–Ω–Ω–µ—Ä-–∫–∞—Ä—Ç–∏–Ω–∫—É",
        "setinfo_no_args": (
            "<emoji document_id=5370881342659631698>üò¢</emoji> <b>–¢–µ–±–µ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å"
            " —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∏–Ω—Ñ–æ</b>"
        ),
        "setinfo_success": (
            "<emoji document_id=5436040291507247633>üéâ</emoji> <b>–¢–µ–∫—Å—Ç –∏–Ω—Ñ–æ —É—Å–ø–µ—à–Ω–æ"
            " –∏–∑–º–µ–Ω–µ–Ω</b>"
        ),
        "desc": (
            "<emoji document_id=5062291541624619917>üòÄ</emoji> <b>Netfoll</b>"
            " –Æ–∑–µ—Ä–±–æ—Ç, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ Hikka —Å –±–æ–≥–∞—Ç—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º."
            " –Æ–∑–µ—Ä–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö –æ—Ç –∏–º–µ–Ω–∏ —Ç–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. <b>–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ Netfoll –º–æ–∂–µ—à—å –≤—Å–µ–≥–¥–∞ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ <a"
            ' href="https://github.com/MXRRI/Netfoll">GitHub</a>'
        ),
    }

    strings_uk = {
        "version": "–í–µ—Ä—Å—ñ—è",
        "prefix": "–ü—Ä–µ—Ñ—ñ–∫—Å",
        "uptime": "–ê–ø—Ç–∞–π–º",
        "send_info": "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —é–∑–µ—Ä–±–æ—Ç",
        "–æ–ø–∏—Å": " ‚Ñπ –¶–µ –Ω–µ —Ä–æ–∑–∫—Ä–∏—î –∂–æ–¥–Ω–æ—ó –æ—Å–æ–±–∏—Å—Ç–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó",
        "_ihandle_doc_info": "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —é–∑–µ—Ä–±–æ—Ç",
        "_cfg_cst_msg": (
            "–ö–∞—Å—Ç–æ–º–Ω–∏–π —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ info. –ú–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ {me},"
            " {version}, {prefix}, {platform}, {upd}, {uptime}, {cpu_usage},"
            " {ram_usage}"
        ),
        "_cfg_cst_btn": (
            "–ö–∞—Å—Ç–æ–º–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ –≤ info. –ó–∞–ª–∏—à –ø–æ—Ä–æ–∂–Ω—ñ–º, —â–æ–± –ø—Ä–∏–±—Ä–∞—Ç–∏ –∫–Ω–æ–ø–∫—É"
        ),
        "_cfg_banner": "–ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –±–∞–Ω–µ—Ä-–∫–∞—Ä—Ç–∏–Ω–∫—É",
        "setinfo_no_args": (
            "<emoji document_id=5370881342659631698> üò¢ </emoji> <b> –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏"
            "—Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –Ü–Ω—Ñ–æ</b>"
        ),
        "setinfo_success": (
            "<emoji document_id=5436040291507247633>üéâ</emoji> <b>–¢–µ–∫—Å—Ç –Ü–Ω—Ñ–æ —É—Å–ø—ñ—à–Ω–æ"
            " –∑–º—ñ–Ω–µ–Ω–æ</b>"
        ),
        "desc": (
            "<emoji document_id=5062291541624619917>üòÄ</emoji> <b>Netfoll</b>"
            " –Æ–∑–µ—Ä–±–æ—Ç, –∑–∞—Å–Ω–æ–≤–∞–Ω–∏–π –Ω–∞ Hikka –∑ –±–∞–≥–∞—Ç–∏–º —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–æ–º."
            " –Æ–∑–µ—Ä –±–æ—Ç –ø—Ä–∞—Ü—é—î —É –≤—Å—ñ—Ö —á–∞—Ç–∞—Ö –≤—ñ–¥ —ñ–º–µ–Ω—ñ –¢–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. <b>–í–∏—Ö—ñ–¥–Ω–∏–π –∫–æ–¥ Netfol –º–æ–∂–µ—à –∑–∞–≤–∂–¥–∏ –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è –Ω–∞ <a"
            ' href="https://github.com/MXRRI/Netfoll">GitHub</a>'
        ),
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "custom_message",
                doc=lambda: self.strings("_cfg_cst_msg"),
            ),
            loader.ConfigValue(
                "custom_button",
                None,
                lambda: self.strings("_cfg_cst_btn"),
                validator=loader.validators.Union(
                    loader.validators.Series(fixed_len=2),
                    loader.validators.NoneType(),
                ),
            ),
            loader.ConfigValue(
                "banner_url",
                "https://github.com/MXRRI/Netfoll/raw/stable/assets/banner.png",
                lambda: self.strings("_cfg_banner"),
                validator=loader.validators.Link(),
            ),
        )

    async def client_ready(self):
        self._me = await self._client.get_me()
        if (
            self.config["banner_url"]
            == "https://github.com/MXRRI/Netfoll/raw/stable/assets/banner.png"
        ):
            self.config[
                "banner_url"
            ] = "https://github.com/MXRRI/Netfoll/raw/stable/assets/banner.png"

    def _render_info(self, inline: bool) -> str:
        me = '<b><a href="tg://user?id={}">{}</a></b>'.format(
            self._me.id,
            utils.escape_html(get_display_name(self._me)),
        )
        build = utils.get_commit_url()
        _version = f'<i>{version.branch} {".".join(list(map(str, list(version.netver))))} {version.netrev}</i>'
        prefix = f"¬´<code>{utils.escape_html(self.get_prefix())}</code>¬ª"

        platfo = utils.get_named_platform()
        if "Termux" not in platfo:
            usage = f" ({psutil.cpu_percent()}% | {utils.get_ram_usage()} RAM)</b>"
        else:
            usage = "\n"

        platform = utils.get_named_platform()

        for emoji, icon in {
            "üçä": "<emoji document_id=5449599833973203438>üß°</emoji>",
            "üçá": "<emoji document_id=6334737201485579954>üçá</emoji>",
            "‚ùì": "<emoji document_id=5866460679594053316>üì±</emoji>",
            "üçÅ": "<emoji document_id=5866334008123591985>üíª</emoji>",
            "ü¶æ": "<emoji document_id=5386766919154016047>ü¶æ</emoji>",
            "üöÇ": "<emoji document_id=5359595190807962128>üöÇ</emoji>",
            "üê≥": "<emoji document_id=6334586503968065308>üê≥</emoji>",
            "üï∂": "<emoji document_id=5866460679594053316>üì±</emoji>",
            "üêà‚Äç‚¨õ": "<emoji document_id=6334750507294262724>üêà‚Äç‚¨õ</emoji>",
            "üëæ": "<emoji document_id=5866169914603081371>üêß</emoji>",
            "üß©": "<emoji document_id=6334313137889609341>üß©</emoji>",
            "üòé": "<emoji document_id=5364105417569868801>üòé</emoji>",
        }.items():
            platform = platform.replace(emoji, icon)

        return (
            self.config["custom_message"].format(
                me=me,
                version=_version,
                build=build,
                prefix=prefix,
                platform=platform,
                uptime=utils.formatted_uptime(),
                cpu_usage=psutil.cpu_percent(),
                ram_usage=f"{utils.get_ram_usage()} MB",
                branch=version.branch,
            )
            if self.config["custom_message"]
            else (
                f"<b>{{}} for {me}</b>\n\n"
                f"<emoji document_id=6334456392228800167>ü™¢</emoji> <b>{self.strings('version')}:</b> {_version} {build}\n"
                f"<emoji document_id=6334701737940616970>üí´</emoji> <b>{self.strings('prefix')}:</b> {prefix}\n"
                f"<emoji document_id=6334620339720423126>üïõ</emoji> <b>{self.strings('uptime')}:</b>"
                f" {utils.formatted_uptime()}\n\n"
                f"<b>{platform}"
                f"{usage}"
            ).format(
                *map(
                    lambda x: utils.remove_html(x) if inline else x,
                    (
                        utils.get_platform_emoji()
                        if self._client.hikka_me.premium and not inline
                        else "üëæ Netfoll",
                    ),
                )
            )
        )

    def _get_mark(self):
        return (
            {
                "text": self.config["custom_button"][0],
                "url": self.config["custom_button"][1],
            }
            if self.config["custom_button"]
            else None
        )

    @loader.inline_handler(
        thumb_url="https://img.icons8.com/nolan/512/info-squared.png"
    )
    @loader.inline_everyone
    async def Info(self, _: InlineQuery) -> dict:
        """Send userbot info"""

        return {
            "title": self.strings("send_info"),
            "description": self.strings("description"),
            **(
                {"photo": self.config["banner_url"], "caption": self._render_info(True)}
                if self.config["banner_url"]
                else {"message": self._render_info(True)}
            ),
            "thumb": ("https://github.com/MXRRI/Netfoll/raw/Stable/assets/bot_pfp.png"),
            "reply_markup": self._get_mark(),
        }

    @loader.command(alias="–∏–Ω—Ñ–æ")
    async def info(self, message: Message):
        """Send userbot info"""

        if self.config["custom_button"]:
            await self.inline.form(
                message=message,
                text=self._render_info(True),
                reply_markup=[
                    {
                        "text": self.config["custom_button"][0],
                        "url": self.config["custom_button"][1],
                    }
                ],
                **(
                    {"photo": self.config["banner_url"]}
                    if self.config["banner_url"]
                    else {}
                ),
            )
        else:
            try:
                await self._client.send_file(
                    message.peer_id,
                    self.config["banner_url"],
                    reply_to=utils.get_topic(message),
                    caption=self._render_info(False),
                )
            except Exception:
                await utils.answer(message, self._render_info(False))
            else:
                if message.out:
                    await message.delete()

    @loader.command(
        ru_doc="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–∏–ø—É '–ß—Ç–æ —Ç–∞–∫–æ–µ Netfoll?'",
    )
    async def whonetfoll(self, message: Message):
        """Send info aka 'What is Netfoll?'"""
        await utils.answer(message, self.strings("desc"))

    @loader.command(
        ru_doc="<—Ç–µ–∫—Å—Ç> - –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ .info",
    )
    async def setinfo(self, message: Message):
        """<text> - Change text in .info"""
        args = utils.get_args_html(message)
        if not args:
            return await utils.answer(message, self.strings("setinfo_no_args"))
        self.config["custom_message"] = args
        await utils.answer(message, self.strings("setinfo_success"))
