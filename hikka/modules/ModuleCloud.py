#
# üîí The MIT License (MIT)
# üåê https://www.gnu.org/licenses/agpl-3.0.html
#
# ---------------------------------------------------------------------------------
#     ‚ñÄ‚ñÑ   ‚ñÑ‚ñÄ   üëæ Module for Netfoll User Bot (based on Hikka 1.6.0)
#    ‚ñÑ‚ñà‚ñÄ‚ñà‚ñà‚ñà‚ñÄ‚ñà‚ñÑ  üîí The MIT License (MIT)
#   ‚ñà‚ñÄ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÄ‚ñà ‚ö†Ô∏è Owner @DarkModules and @Netfoll
#   ‚ñà ‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñà ‚ñà
#      ‚ñÄ‚ñÄ ‚ñÄ‚ñÄ
# ---------------------------------------------------------------------------------
# meta developer: @Netfoll

import difflib
import inspect
import io

from telethon.tl.types import Message

from .. import loader, utils


@loader.tds
class ModuleCloudMod(loader.Module):
    """Hikari modules management"""

    strings = {
        "name": "ModuleCloud",
        "args": "üö´ <b>Args not specified</b>",
        "404": "üòî <b>Module not found</b>",
        "not_exact": (
            "‚ö†Ô∏è <b>No exact match occured, so the closest result is shown instead</b>"
        ),
    }

    strings_ru = {
        "args": "üö´ <b>–ù–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤</b>",
        "_cls_doc": "–ü–æ–∏—Å–∫ –º–æ–¥—É–ª–µ–π",
        "not_exact": (
            "‚ö†Ô∏è <b>–¢–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ –Ω–∞—à–ª–æ—Å—å, –ø–æ—ç—Ç–æ–º—É –±—ã–ª –≤—ã–±—Ä–∞–Ω –Ω–∞–∏–±–æ–ª–µ–µ"
            " –ø–æ–¥—Ö–æ–¥—è—â–µ–µ</b>"
        ),
        "404": "üòî <b>–ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>",
    }

    @loader.command(
        ru_doc="<–∏–º—è –º–æ–¥—É–ª—è> - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –º–æ–¥—É–ª—å",
    )
    async def ml(self, message: Message):
        """<module name> - Send link to module"""
        args = utils.get_args_raw(message)
        exact = True
        if not args:
            await utils.answer(message, self.strings("args"))
            return

        try:
            try:
                class_name = next(
                    module.strings["name"]
                    for module in self.allmodules.modules
                    if args.lower() == module.strings["name"].lower()
                )
            except Exception:
                try:
                    class_name = next(
                        reversed(
                            sorted(
                                [
                                    module.strings["name"]
                                    for module in self.allmodules.modules
                                ],
                                key=lambda x: difflib.SequenceMatcher(
                                    None,
                                    args.lower(),
                                    x,
                                ).ratio(),
                            )
                        )
                    )
                    exact = False
                except Exception:
                    await utils.answer(message, self.strings("404"))
                    return

            module = next(
                filter(
                    lambda mod: class_name.lower() == mod.strings["name"].lower(),
                    self.allmodules.modules,
                )
            )

            sys_module = inspect.getmodule(module)

            link = module.__origin__

            text = (
                f"<b>üß≥ {utils.escape_html(class_name)}</b>"
                if not utils.check_url(link)
                else (
                    f'üìº <b><a href="{link}">Link</a> for'
                    f" {utils.escape_html(class_name)}:</b>"
                    f' <code>{link}</code>\n\n{self.strings("not_exact") if not exact else ""}'
                )
            )

            file = io.BytesIO(sys_module.__loader__.data)
            file.name = f"{class_name}.py"
            file.seek(0)

            await message.respond(text, file=file)

            if message.out:
                await message.delete()
        except Exception:
            await utils.answer(message, self.strings("404"))
